{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"conclusion/","title":"Related Sessions at Cisco Live","text":""},{"location":"conclusion/#related-sessions-at-cisco-live","title":"Related Sessions at Cisco Live","text":"<ul> <li>BRKXXX-1111 My friend's breakout session</li> </ul>"},{"location":"lab1_environment_intro/","title":"Lab 1 - Environment Introduction","text":""},{"location":"lab1_environment_intro/#lab-1-introduction-to-the-environment","title":"Lab 1 - Introduction to the environment","text":""},{"location":"lab1_environment_intro/#objectives","title":"Objectives","text":"<p>This is a read-only lab there are no configuration tasks you need to accomplish. Upon completion of this lab you will be able to:</p> <ul> <li>Understand the Webex AI Agent Architecture</li> <li>Describe the Webex AI Agent Components for CCE</li> <li>Understand the Webex AI Agent Call Flow</li> <li>Know how to access the components used to deliver this lab and how to access each part.</li> </ul> <p>Expected Total Time - 15 minutes</p>"},{"location":"lab1_environment_intro/#task-1-introduction-to-webex-ai-agent","title":"Task 1. Introduction to Webex AI Agent","text":"<p>Webex AI Agent refers to an artificial intelligence virtual agent integrated into Cisco WebexCCE or CCE. These AI Agents are designed to enhance customer service and support by automating interactions, assisting human agents, and providing analytics-driven insights.</p>"},{"location":"lab1_environment_intro/#webex-agent-ai-architecture","title":"Webex Agent AI Architecture","text":"<p>Native: Cisco's in-house solution for Virtual Agent. This is the type of Virtual agent that you will configure in this lab.</p> <p>BYO VA: Bring your own Virtual Agent. (Not currently supported, will be offered at a later time)</p>"},{"location":"lab1_environment_intro/#webex-agent-ai-components","title":"Webex Agent AI Components","text":"<p>In both the CCE on-premises solution and the Webex CCE tenant, several key components are integral to the Webex AI Agent solution. These include Cisco Unified Voice Portal (CVP), CVP Call Studio, VVB/Speech Server, the CCE core, and Cloud Connect. On the cloud side, the main components consist of Cisco Webex Cloud Services (such as Control Hub, Billing, etc.), AI Orchestration services, the Webex Connect AI Agent, and the AI Agent Studio.</p> <p>CVP: Enables automated customer self-service and call routing, acting as an Interactive Voice Response (IVR) system integrated with CCE / WxCCE. It works with the VVB and Speech Server to provide AI Agent integration in the IVR flow.  </p> <p>CVP Call Studio: CVP Call Studio is a development platform for creating voice applications.</p> <p>VVB/Speech Server:  is designed to facilitate concurrent multimedia or IVR communication processing. The speech Server communicates the request from customer/caller to the AI orchestration services using gRPC.</p> <p>CCE Core: Peripheral Gateways, the Router, Admin Workstation, and other CCE components work together to process incoming requests and determine the most suitable destination to handle them. The Admin Workstation (AW) is where you configure and manage the overall CCE solution..</p> <p>Control Hub: Control Hub serves as the central platform for managing and configuring Webex cloud solutions. From Control Hub, you can also provision and directly launch the AI Agent Studio.</p> <p>AI Orchestration: Refers to Cisco's cloud-based services that handle incoming requests from customers through the WxCCE or CCE solution, then route those requests via a Cisco Connector to the Webex Connect AI Agent.</p> <p>AI Agent Studio: AI Agent Studio helps to create the necessary workflows for Scripted AI Agent</p> <p>There are two kinds of AI Agents:</p> <ul> <li> <p>Scripted Agent: Works on Predefined Intents, Entities and training data backed with a NLP Engine.</p> </li> <li> <p>Autonomous Agent: Works on Tools / Skills and Knowledge Based powered by a Large Language Model (LLM).</p> </li> </ul> <p>More Information on: Webex AI Agent Studio Administration guide</p>"},{"location":"lab1_environment_intro/#task-2-webex-ai-agent-call-flow","title":"Task 2. Webex AI Agent Call Flow","text":"<p>Review the flow diagram below for the details of how the components communicate.</p> <p></p> <ol> <li>At start up, VVB/Speech Server requests a token to Cloud Connect in order to authenticate with Webex Services and AI Orchestration.</li> <li>Customers place a call.</li> <li>Call is sent to CVP (Call control and IVR treatment) from Cisco Unified Border Element (CUBE).</li> <li>CVP sends the call to CCE and receives the instructions to send the call to VVB for IVR Treatment.</li> <li>VVB sends the request to Speech Server for further processing - connect the call to the virtual Agent (AI Agent).</li> <li>Speech Server sends AI Agent Id and Event to the AI Orchestrator.</li> <li>AI Orchestrator provides the session information (URI) of the AI Agent.</li> <li>Speech Server creates a new session with Webex Connect and passes the welcome event which is configured in VAV element in CVP call studio.</li> <li>Call is connected between the Caller and the AI Agent via the VVB/Speech Server.</li> </ol>"},{"location":"lab1_environment_intro/#task-3-review-of-the-lab","title":"Task 3. Review of the Lab","text":"<p>In this task, we will log in to the components that are used in this lab. The goal is to understand where we need to go to configure, maintain, and troubleshoot these features.</p> <p>Step 1. Access dCloud systems</p> <p>Follow the steps in the Credentials tab to access the dCloud eXpo session. Once you are logged into WKST1, locate the mRemoteNG icon and double-click to open.</p> <p></p> <p>We will use the CVP and AW-HDS-DDS machines in this lab. You do not need to access them yet, just make a note of where they are.</p> <p>Step 2. Access Control Hub</p> <p>Open a web browser to the Webex Control URL. Refer to the Credentials tab for details for the credentials to use. The Overview page should load as shown in the screenshot.</p> <p>Under the Services section, select Contact Center.</p> <p></p> <p>Review the items in this section.</p> <p>AI Agent - This new section has been added to access the Webex AI Studio. This provides a link to the environment where you will build and maintain your Native AI Bots.</p> <p></p> <p>General \u2013 This shows the country where the tenant is created and the Timezone selected. You can also find a link to access Webex Engage.</p> <p></p> <p>Digital \u2013 This menu is where you can upload the public key certificate to decrypt the SAML assertion. You can access both Webex Connect and Webex Engage from this menu.</p> <p></p> <p>Integrations \u2013 This section is shown only for the AI Trials as the CCAI entitlement is required. It is expected that this will not be shown once this feature is launched.</p> <p></p> <p>Cloud Connect \u2013 This menu is where you would add the Cloud Connect server to the tenant. Since we have shared tenants, this part needed to be done ahead of time. Please DO NOT change any information shown in this section.*</p> <p></p> <p>Step 3. Access AI Agent Studio</p> <p>Navigate to the AI Agents section of Control Hub. Select the link, What are AI Agents?. Notice that this opens a new tab and directs you to the documentation. As you navigate this section, you can refer to the official documentation at any time.</p> <p></p> <p>Select the Build your AI Agent button. This will open a new tab to the Webex AI Agent Studio. You will see that there is one Scripted AI Agent template there, this is simply a placeholder. You will build your own AI Agent in the coming labs.</p> <p></p> <p>Next, select the second icon in the black menu bar on the left. This opens the Knowledge base management section. To save time in the class, we have created Knowledge Bases for each seat.</p> <p>Finally, select the third icon down. This opens a tab to the documentation for the Webex AI Agent Studio.</p> <p>Step 4: Access CVP Call Studio</p> <p>In the dCloud Workstation 1 machine you opened in step 1, log in to the CVP server in mRemoteNG.</p> <p></p> <p>After you have logged in, locate and open Cisco Unified Call Studio.</p> <p></p> <p>We will eventually build the CVP Application here. For now, familiarize yourself with where Studio is located.</p> <p>Step 5. Finesse Agent Desktop</p> <p>On your WKST1 open the browser of your choice. copy the Finesse URL below and paste it in to the URL field of the browser.</p> <pre><code>https://finesse1.dcloud.cisco.com/desktop\n</code></pre> <p></p> <p>Log in as agent, Sandra Jeffers (sjeffers) with extension 1080. Note that Sandra is a single sign-on agent, so you may see a redirect to the ADFS screen. The username and password should be saved. If the password is missing, refer to the Credentials tab.</p> <p></p> <p>When prompted, enter extension 1080, then select Submit.</p> <p></p> <p>When you have logged in, you will see a new icon at the top of the screen that appears to be a blue circle. This is the new Webex AI Assistant. We will see this later in this class. If you select the Agent Answers option in the left-side, black bar, you will see the Transcript feature. This will show the interaction that occurred between the customer and the Webex AI bot. We will see this feature later in this class.</p>"},{"location":"lab2_autonomous_bot/","title":"Lab 2 - Autonomous AI Agent","text":""},{"location":"lab2_autonomous_bot/#lab-2-autonomous-agents","title":"Lab 2 - Autonomous Agents","text":""},{"location":"lab2_autonomous_bot/#objectives","title":"Objectives","text":"<p>In this lab, you will learn about Autonomous AI Agents. You will see how to create an Autonomous AI Agent and map it to a knowledge base. You will learn how to do all of the following tasks:</p> <ul> <li>Know how to create an Autonomous AI Agent from scratch.</li> <li>Create an agent goal, instructions, and welcome message.</li> <li>Understand where to map a Knowledge Base and how to update the Knowledge Base.</li> <li>See how to integrate the AI Agent into a call studio script.</li> </ul> <p>Explanation of formatting:</p> <ul> <li>Italics - This indicates a button, menu option, or object that should be selected.</li> <li>\"Quoted Text\" - This indicates that the text should be typed exactly as indicated.</li> </ul> <p>Expected Total Time - 60 minutes</p> <p>Note, you will have about 60 minutes to complete this lab.</p>"},{"location":"lab2_autonomous_bot/#task-1-create-an-ai-agent","title":"Task 1. Create an AI Agent","text":"<p>In this task, we will create the AI Agent and define define the agent's goal, instructions, and welcome message.</p> <ul> <li>Goal: What is the primary objective of the AI agent?</li> <li>Instructions: How should your agent interact with customers to perform its task?</li> <li>Welcome Message: How should your agent greet your customer initially?</li> </ul> <p>Step 1.</p> <p>Log into Webex Control Hub and select Contact Center -&gt; AI Agents -&gt; Build your AI Agent.</p> <p></p> <p>Step 2.</p> <p>Select the Create Agent button to the top right of the screen.</p> <p></p> <p>Select Start from scratch and then click the Next button to the bottom-right of the screen.</p> <p></p> <p>Step 3.</p> <p>Select Autonomous in the type of agent box. In the Add the essential details form:</p> <ul> <li>Provide an Agent Name of your choice. Ensure that it is unique by including your seat number at the beginning.  ex. \"S01 - My AI Agent\"</li> <li>The System ID is auto-generated.</li> <li>The AI engine should be left as Webex AI Pro 1.0.</li> </ul> <p>In the Agent's goal, type the following text:</p> <pre><code>You are a polite, professional agent who is an expert in Cisco Headsets. You will help answer customer pre-sales questions on headsets.\n</code></pre> <p>After the form is completed, select the Create button.</p> <p></p> <p>Step 4.</p> <p>Review the form for the Agent that you have just created. You will notice four configuration sections at the top and four menu options at the left. Let's review each.</p> <p></p> <ul> <li> <p>Configuration</p> <ul> <li> <p>Profile: This section is where you configure the options that give the guidance to your AI Agent. This form contains the key prompts that you AI Agent will use to perform the task you have for it.</p> <ul> <li>Agent name: A human readable name for the AI Agent. This can be updated as required.</li> <li>System ID: Generated, unique ID for the AI agent. This can be changed, but must be unique in your tenant.</li> <li>Agent's goal: This describes what your agent should do at a high level.</li> <li>Instructions: This is the heart of the AI Agent. This should be a full description of what your agent does and how it should do it. Include guardrails, error handling, context, and describe how actions (where applicable) should be used.</li> <li>URL for agent profile image: This is the image used with your agent. You can add your own image if you wish.</li> <li>AI engine: This lets you select which AI engine you wish to use. There are currently two engines available, \"Webex AI Pro 1.0\", and \"Webex AI Pro-US 1.0\". As our lab is based in the European data center, you will only see \"Webex AI Pro 1.0\".</li> <li> <p>Welcome message: This is the first message that your AI Agent will send to the customer.</p> <p>You can find the documentation on each option at the following website.</p> </li> </ul> </li> <li> <p>Knowledge: This section allows you to select the Knowledge base that the agent will use to fulfil the responses to the customer.</p> </li> <li>Actions: This section defines the actions that you agent can take. You will see one default action included with each agent named \"Agent handover\". You can create additional actions to fulfill tasks as required.</li> <li>Language: This allows you to select the language used by your AI Agent as well as the voice that will be used. For the Webex AI Pro-US engine, the only language  available is English.</li> </ul> </li> <li> <p>Sessions: This allows you to see the interactions with your AI Agent. We will look at this in a later section.</p> </li> <li>History: This shows the save history of your agent. As you make changes that are subsequently saved and published, this section will be populated.</li> <li>Analytics: This will show statistics and reporting about the use of your AI Agent.</li> </ul> <p>Step 5.</p> <p>Let's now update the Instructions field. We have provided an example instruction below. Copy and paste this into the Instructions field to start.</p> <pre><code>You are an expert customer service representative who can answer any question on the capabilities and features of Cisco headsets. You should answer all questions in the most professional, helpful way possible.\n\nThe customers contacting you are potential customers who will need additional information on the features and capabilities of Cisco headsets in order to make and informed purchasing decision.\n\nIf the customer is not clear in what they ask, clarify their question and ensure that you have all the information you need. \n\nEnsure that your only interactions are about Cisco headsets and the knowledge base. You may also provide information about resellers in the knowledge base. If the customer asks a non related question, inform them politely that you cannot help them with that query and suggest that they seek other solutions outside of yourself.\n</code></pre> <p></p> <p>After you have done this, review the text and notice what has been included.</p> <p>Paragraph 1 \u2013 This describes what the Agent should do. It gives the way that the agent should interact with the customer. Note that we tell the agent what voice it should use (most professional, helpful way possible).</p> <p>Paragraph 2 \u2013 This describes what customers will be talking to the AI Agent. This lets the agent format the messages in the proper way.</p> <p>Paragraph 3 \u2013 Here we account for errors where the agent may not understand what the customer asked.</p> <p>Paragraph 4 \u2013 The final paragraph sets guardrails on the interactions. We explicitly tell the agent that it may not answer questions that are outside of the knowledge base.</p> <p>Step 6.</p> <p>Next, let's update the Welcome message. As a reminder, this is the first message that the agent will send to the customer. This should greet the customer and describe what to expect from the interaction. Use the sample shown as a starting point and copy/paste it into your agent.</p> <pre><code>Hello, I am a sales assistant agent and I can help answer questions about Cisco headsets. How can I help you today?\n</code></pre> <p>Step 7.</p> <p>We now have the AI Agent configured but we need to map to to a Knowledge Base. Select the Knowledge tab to configure this. From the Knowledge Base drop-down, select the knowledge base that corresponds to your seat number. You may find it easier to search for the knowledge base instead of scrolling through the entire list.</p> <p></p> <p>Step 8.</p> <p>Finally, select the Language tab. If you wish, update the voice to a different option but leave the language set to English.</p> <p></p> <p>Step 9.</p> <p>Now that you have configured the AI Agent, select the Save Changes button at the top of the AI Agent configuration screen.</p> <p></p> <p>Step 10.</p> <p>In this step, we will personalize the Knowledge Base. The current Knowledge Base is just Cisco data sheets. Let's add in some contact information for a reseller, YOU!!</p> <p>a. Select the Knowledge Base management link at the left.</p> <p></p> <p>b. Locate the Knowledge Base you used in step 7. As a reminder, this will include your seat number. You can use the search function to locate your Knowledge Base as shown in the image. After locating your Knowledge Base, open it by selecting the box in the search results.</p> <p></p> <p>c. Feel free to review the Knowledge Base area to see what files are already uploaded. Select the Documents menu at the top of the screen to add in the custom content.</p> <p></p> <p>d. Select the + Create Document link in the middle of the page.</p> <p></p> <p>e. In the Create Document pop-up, provide a name for the document. Provide the name \"Headset Resellers\" in the document name field. Leave the category option as Add to existing category and the Select existing category dropdown as \"Unassigned\". Select Save after providing a name.</p> <p></p> <p>f. In the text area, use the example shown in the image to add your own company name and information (or make one up). Feel free to be creative here. Once you have filled this out, select the Save button at the top of the document.</p> <p></p> <p>g. After a few seconds to a minute, you should see a message that the document was successfully added. After you see this message, select the Information menu at the top of the page. You should see that the custom document in the history. If you do not see this immediately, select the Refresh icon at the top of the Activity History.</p> <p></p> <p>You are now ready to test the agent.</p>"},{"location":"lab2_autonomous_bot/#task-2-test-ai-agent-and-review-session-history","title":"Task 2. Test AI Agent and Review Session History","text":"<p>In this task, you will test the AI Agent that you created above. This will let you validate that everything is working correctly. Cisco supports testing with both text and voice.</p> <p>Step 1. Text Preview</p> <p>Select the Preview button at the top of the screen. Note that you do not need to publish the agent to preview.</p> <p></p> <p>The preview interface pops up at the bottom. Select, Start a chat to begin testing.</p> <p></p> <p>Step 2. Chat with Agent</p> <p>You will see your Welcome message come up on the screen. To begin testing, type the question, \"What type of headsets does Cisco sell?\". You can see the example response that was generated when the lab guide was built. Because this is an LLM generated AI Agent, the result that you receive, may be different. Select the Read More link in the response to read the entire response. This will let you read the full response that was generated.</p> <p></p> <p>Continue to interact with the agent and ask questions. You may want to ask which headsets are bluetooth enabled or which ones have boom mics. To test the guardrails, ask it a non-related question such as, \"What is the weather in San Diego today?\" To see the custom information you added to the agent, ask, \"Which partner can sell this to me?\" You should see the information you added.</p> <p>Step 3. Review Session History</p> <p>After you have done testing the Agent are are satisfied with the results, select the Sessions menu at the left. This opens the sessions list and allows you to see the messages sent and responses that were generated.</p> <p></p> <p>Locate the session record for the test session and click on it.</p> <p></p> <p>You will see the agents message, the customer's response to the message, then the agents reply to that message. Select the first response to the \"What type of headsets does Cisco sell?\". Note that you may select either the agent's message or the customer's message. In the right side, notice that you can see the specific knowledge base used as well as the detected language and the AI Engine.</p> <p></p> <p>Click the down arrow next to the Knowledge Base to review the documents and pages where the agent generated the information. Notice as you scroll down, you can see each document which information was pulled from and the specific page and content.</p> <p></p> <p>Step 4. Publish the AI Agent</p> <p>If you are not already on the Configuration page, select the Configuration menu at the left. Select Publish at the top of the page. In the Publish and track changes box, enter a comment about this publication. In the example, we have entered \"Initial publication\". These comments will help you identify what has changed later so ensure that these are meaningful to you.</p> <p></p> <p>Before we go any further, Select the History menu. Here, you can see the history of the publications and once there are more than one version, you can select the drop-down in the controls column to revert to a previous release. You will also see that you can export a specific version of the agent if you need to fork the development for some reason.</p> <p></p>"},{"location":"lab2_autonomous_bot/#task-3-integrate-to-call-flow","title":"Task 3. Integrate to Call Flow","text":"<p>We have now created an AI Agent and have tested it to ensure it's working. We are now ready to integrate into a call flow.  You will download a shell application that we have created for you. You will import this, then modify it to call the Agent that you created above.</p> <p>Step 1. Open mRemoteNG on WKST1 if you do not already have mRemote open, then login to CVP. Once you have logged in to CVP, locate the Call Studio icon on the desktop and double-click it to open Call Studio.</p> <p></p> <p>Step 2. Open a browser on the CVP server and download the application copying the link below and pasting it into the browser.</p> <pre><code>https://webexcc-sa.github.io/LAB-2356/downloads/NativeAI_Autonomous.zip\n</code></pre> <p>Remember where you download this (it will default to the Downloads folder for the Administrator) to as you will need it in step 3. You do not need to extract the zip.</p> <p>Step 3. Import the application you have downloaded.</p> <ul> <li> <p>Select the File menu, then select Import.</p> <p></p> </li> <li> <p>In the box that pops up, select Projects from Folder or Archive, then select Next.</p> <p></p> </li> <li> <p>In the Import Projects from Folder or Archive dialog box, select the Archive button at the top of the box, then navigate to where you downloaded the example application and select it. Once you are back at the import dialog, ensure that you uncheck the folder \"NativeAI_Autonomous.zip_expanded\" and leave the \"NativeAI_Autonomous.zip_expanded\\NativeAI_Auto\" selected. Refer to the image and once all options are set, select Finish.</p> <p></p> </li> </ul> <p>Step 4. In the Project Explorer, locate the NativeAI_Auto project. Expand this and double-click on the app.callflow to open the example application.</p> <p></p> <p>Step 5. Review the application that you have imported. You will see that we have already added the required elements to the canvas.</p> <p></p> <p>Refer to the table for what each element is used for.</p> Element Name Element Type Element Function CVP Subdialog Start_01 CVP Subdialog Start Mandatory element for all Comprehensive Call Flows to receive data from CCE. CVP Subdialog End_01 CVP Subdialog End Mandatory element for all Comprehensive Call Flows to return data to CCE. HeadsetAgent VirtualAgentVoice VAV element which allows CCE to interact with the Native AI agent. HeadsetAgentDecision Decision Decision elements allow the user to take different outcomes based on the output of a previous element. This decision element handles the output from the HeadsetAgent VAV element. ErrorMessage Audio Audio elements allow script to play either static audio files or play text to speech files through an ASR/TTS server. AgentFlag Flag Flag elements can be added to scripts to help with tracking calls through the logs and indicating what path a script has taken. This Flag will indicate that the customer requested to speak to an agent. ErrorFlag Flag Flag elements can be added to scripts to help with tracking calls through the logs and indicating what path a script has taken. This flag will indicate that the AI Agent encountered an error. SessionEndFlag Flag Flag elements can be added to scripts to help with tracking calls through the logs and indicating what path a script has taken. This flag will indicate that the AI Agent completed and no agent was requested. <p>Once you have imported the app, you are ready to start configuring the elements required to interact with the agent.</p> <p>Step 6.  Update the VAV Element with the Agent ID from AI Agent Studio.</p> <p>a. Select the HeadsetAgent VAV element, then select the Settings tab. The Webex AI Agent setting allows you to select which type of VAV bot you will be working with. Notice that we have selected the value, Autonomous from the dropdown.</p> <p></p> <p>b. Immediately under the Webex AI Agent setting, you will see the Bot ID setting. The value you see is the ID of the agent that was used to create this lab and will not be in the tenant you are using.</p> <p></p> <p>To find the value you need to use, go to the Webex AI Studio tab and select the AI Agent you created above. Select the 3 dots at the top, right-hand side of the screen, and in the drop-down, select Copy agent ID.</p> <p></p> <p>Paste the agent ID you copied into the value for Bot ID.</p> <p>Step 7. Deploy the Application</p> <p>a. If you have not saved your application, do so now by selecting the save icon in the toolbar.</p> <p>b. Validate the application. Right-click the NativeAI_Auto application and select Validate.</p> <p></p> <p>Check the errors grid at the bottom of the screen to ensure nothing is shown. If you do see any errors, review the error and resolve the issue by referring back to the portion of the lab where that item was configured.</p> <p>c. Deploy the application to the VXML Server (located on the CVP server you are logged into). Right-click on the NativeAI_Auto application and select Deploy.</p> <p></p> <p>d In the window that pops-up, leave the values at their defaults. The NativeAI_Auto application checked and the folder left as \"C:\\Cisco\\CVP\\VXMLServer\" and click Finish.</p> <p>e. On the CVP server, deploy the application. Navigate to \"C:\\Cisco\\CVP\\VXMLServer\\applications\\NativeAI_Auto\\admin\". Double-click deployApp.bat.</p> <p>f. In the command window that pops up, type \"yes\" to confirm that you want to deploy the application. Hit enter one more time after the application has been deployed to close the command prompt window.</p> <p>Step 8. Update CCE Script to use the new application</p> <p>a. In your mRemote window, locate the AW-HDS-DDS server and login.</p> <p></p> <p>b. Open the Script Editor by opening the Unified CCE Administration Tools folder on the desktop, then opening the Script Editor link.</p> <p></p> <p></p> <p>c. Open the script named, CumulusInbound.</p> <p></p> <p>Select the Edit button in the toolbar.</p> <p></p> <p>d. Locate the Set Variable node which sets the VXML Application name (the fourth node from the top left).</p> <p></p> <p>Open it and update the name of the script (currently HelloWorld) to \"NativeAI_Auto\".</p> <p></p> <p>e. Select the Save button in the toolbar to make this change live, then select the Monitor Script button.</p> <p></p> <p>After a moment, you will see green boxes between each of the nodes. This will let you see the call's progress through the script visually. It is expected that all the green boxes show 0 as we have not placed any calls to this script yet.</p> <p></p>"},{"location":"lab2_autonomous_bot/#task-4-test-call-flow","title":"Task 4. Test Call Flow","text":"<p>In this task, we will test the Native AI agent that you created and see how the human agent sees the call.</p> <p>Step 1. If you are not already logged in to Finesse on WKST1, open the Chrome browser, open a new tab and enter the URL below: </p> <pre><code>https://finesse1.dcloud.cisco.com\n</code></pre> <p>Login with the following details:</p> <ul> <li>Username: sjeffers</li> <li>Password: C1sco12345</li> <li>Extension: 1080</li> </ul> <p>Note, that this is an SSO agent so you should only need to enter the username in the Finesse login screen. The ADFS page should have the agent credentials saved.</p> <p>Once you have logged in to Finesse, select Ready from the drop-down -&gt; Next, click the Agent Answers tab from the left side menu. (Note: The name of the tab in the image does not match the document as it was taken from a slightly different version of this lab. The feature, however is the same.)</p> <p></p> <p>Step 2. Use your mobile phone to call into the number. </p> <p>a. Locate the Main phone number for your session. On WKST1 open a browser and open a new tab, then in the default page that appears, select Demo Links -&gt; Demo Website.</p> <p></p> <p>b. In the Cumulus Finance website that is shown, select the blue box on the right-hand side that reads Talk to an Expert.</p> <p></p> <p>c. In the box that pops out, select the Call Us link. In the box that pops up, note the Main number, this is what you will use to test your lab.</p> <p>IMPORTANT: THE NUMBER SHOWN IN THE IMAGE IS NOT THE NUMBER YOU WILL USE FOR YOUR LAB. ENSURE THAT YOU FIND THE NUMBER FOR YOUR SESSION!</p> <p></p> <p>Step 3. Use your mobile phone to call into the number. You should hear the bot greet you by name and your town, then ask how to help.</p> <p>Step 4. Recommended ways to test the agent.</p> <ol> <li>After the agent answers and greets you, ask which headsets support bluetooth.</li> <li>Ask which headsets have boom mics.</li> <li>Feel free to ask other questions about headsets.</li> <li>Try out the guardrails by asking a non-related question like \"What is the weather in San Diego today?\"</li> </ol> <p>Step 5.</p> <p>When you are done testing the AI Agent, ask to speak to a human agent. You should then see the call arrive at the Finesse desktop. Answer the call and notice that the transcript (1) shows up. Select the AI Assistant button (2) at the top to show the AI Assistant. Here (3), you will see a summary of the call. Finally, notice the call variable \"Call Reason\" (4) which gives a one sentence summary of what the customer called about.</p> <p></p> <p>This now completes lab 2</p>"},{"location":"lab3_scripted_bot_basic/","title":"Lab 3 - Fulfillment w/Scripted AI Agent","text":""},{"location":"lab3_scripted_bot_basic/#lab-3-import-and-customize-an-ai-agent","title":"Lab 3 - Import and Customize an AI Agent","text":""},{"location":"lab3_scripted_bot_basic/#objectives","title":"Objectives","text":"<p>In this lab you will build a Scripted AI agent that can respond to both chat and voice channels:</p> <ul> <li>Know how to import an exported agent</li> <li>Know how to create Intents, Entities, and Responses</li> <li>Know how to return data back to the calling application</li> <li>Know how to use previous interactions to troubleshoot intent and response mapping</li> </ul> <p>This agent will collect the order number and a user PIN from the user, then pass that information back to the Call Studio application. The studio application will then call a RESTful API to get order status and return this status back to the AI Agent. The AI Agent will play the order status back to the customer.</p> <p>Explanation of formatting:</p> <ul> <li>Italics \u2013 This indicates a button, menu option, or object that should be selected.</li> <li>\"Quoted Text\" \u2013 This indicates that the text should be typed exactly as indicated.</li> </ul> <p>Expected Total Time - 60 minutes</p> <p>Note, you will have about 60 minutes to complete this lab.</p>"},{"location":"lab3_scripted_bot_basic/#task-1-import-and-customize-an-agent","title":"Task 1. Import and Customize an Agent","text":"<p>In this task, we will import an agent that we have configured for you ahead of time. The full steps to configure a Scripted AI Agent would take more time than we have for this lab so we have simplified quite a bit.</p> <p>Step 1. Download the example agent and import into AI Agent Studio</p> <p>a. Select the Scripted AI Agent to download the AI Agent to your desktop. Once you have done this, extract the zip file so that you have the JSON file ready.</p> <p>b. In AI Agent Studio, select the Import agent button at the top, right side of the studio.</p> <p></p> <p>c. Select the Upload button, then navigate to where you extracted the Agent and select it to import. Provide unique agent name. To do this, include your seat number in the format of, \"S01 - My Order Fulfillment Agent\". The System ID will be automatically generated, accept the default. After validating that everything is correct, select the Import button at the bottom, right of the page.</p> <p></p> <p>Step 2. Add Intent and Response to collect required information. Rather than have you create all the Intents and Responses, you will only create one sample Intent and its corresponding Response.</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Intents -&gt; click on the Create intent button.</p> <p></p> <p>b. Enter the Intent name as \"Start Order Tracking\" and enable the toggle button to Reset slots after completion.</p> <p>c. Under the Intent and Utterances section, type the phrase, \"Track my order\" and click the Add button.</p> <p></p> <p>d. Next, add a 2nd utterance by typing \"track order number 123456 with pin 1234\" and clicking the Add button.</p> <ul> <li>As soon as the 2nd utterance is added, the 6 digit number and the 4 digit pin will be highlighted and previously created entities of \"order_number\" and \"user_pin\" are added under the Slot filling section.</li> <li>In the Slot filling section, check the Required box for each of these slots.</li> </ul> <p></p> <p>What is an entity?</p> <p>Entities are the building blocks of conversations. They are essential elements that the AI agent extracts from user utterances. Entities represent specific pieces of information, such as product names, dates, quantities, or any other significant group of words. By effectively identifying and extracting entities, the AI agent can better understand user intent and provide more accurate and relevant responses.</p> <p>What is a slot?</p> <p>The value collected for an entity is called a slot. Consider the following analogy, entity is a variable name and slot is the value of that variable.</p> <p>Why do I need to create a slot here?</p> <p>As part of the Intent, the agent needs to collect the basic info like order number and the user pin so that these 2 values can be passed to the API to look for the status of an order in the database.</p> <p>e. Add the Response for missing order number by selecting the drop-down next to the order_number entity in the Slot filling section. In the search box, begin typing the phrase \"order_number\" and select the Custom response named, \"order_number\".</p> <p></p> <p>Repeat this for the user_pin entity. The response name you need to find is \"pin_missing\". Reference the image below for the completed Slot filling section.</p> <p></p> <p>f. On the \"Start Order Tracking\" Intent configuration page and under the Intent and utterances section, click on the Generate button.  </p> <p>g. In the Generate variants dialog box, provide a description as described below to generate relevant training data and utterances. </p><pre><code>Generate prompts to track an order. Five of those prompts include a 6-digit order number. Another five of the prompts include a 6-digit order number and a 4-digit pin.\n</code></pre><p></p> <p>h. In the Number of variants enter 20 and set Creativity to High. Lastly, click the Generate button.</p> <p></p> <p>i. This is what your Intent and utterances configuration section should now look like. The order_number and user_pin slots should now be highlighted automatically. You can add more utterances if you like.</p> <p>Note: Hallucinations should be rare, but review the generated utterances to enure there are no hallucinations.</p> <p></p> <p>You can also add an utterance as a Regular Expression (RegEx)</p> <ul> <li>track*.*order</li> <li>order*.*track</li> </ul> <p></p> <p>Step 3. Create Response to return data to Call Studio</p> <p>a. In the Response section, select the drop down and click on Create new.</p> <p></p> <p>b. In the Create a response pop up windows, enter the response name as track_order_wait and then select the + symbol and click on Voice to add Voice channel.</p> <p>c. In the Text section, add the text below as Variant 1. Feel free to add more of these variants if you like.</p> <pre><code>Please wait while I track your order.\n</code></pre> <p>d. Now, click on the Custom Event button to the right to create a custom event and enter as shown below:</p> <ul> <li>Event name: <pre><code>custom_event\n</code></pre></li> <li>Event payload: <pre><code>{\n  \"Execute_Request\": {\n    \"Data\": {\n      \"Params\": {\n        \"order_number\": \"${entity.order_number}\",\n        \"user_pin\": \"${entity.user_pin}\"\n      }\n    },\n    \"Event_Name\": \"custom_event\"\n  }\n}\n</code></pre> e. Lastly, click Create and this will take you back to the \"Start Order Tracking\" Intent configuration page.</li> </ul> <p></p> <p>Why do we need to add Custom Event here?</p> <p>Custom Event is being added here to pass the order_number and user_pin entity data collected by the AI Agent, back to the Call Studio app. This is coming up in the next lab guide.</p> <p>Step 6. Verify that you've completed all of the required configurations as seen in the screenshot below and click Create.</p> <p></p> <p>Step 7. Add Inbound Intents</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; click on the Welcome message response.</p> <p></p> <p>b. Next, select the Voice channel response located next to Default (web).</p> <p></p> <p>c. In the incoming event name, enter \"welcome_event\". Once you have done this, select the Save button at the bottom to return to the list of responses.</p> <p></p> <p>d. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; Click on the magnifying glass next to \"Response Name\" to search for a response. Type in the first few letters of, \"track_order_results\". Locate the Response in the list, and select it to edit it.</p> <p></p> <p>e. In the incoming event name, enter \"track_order_results\". Once you have done this, select the Save button at the bottom to return to the list of responses.</p> <p></p> <p>Why did we need to do this? When the AI Agent is called from Call Studio, we need to tell the Agent where it should start. This is what the incoming event name field allows us to do. When you see the Call Studio application in the steps below, notice that we have specified the welcome_event in the first node and the track_order_results in the second.</p> <p>Step 8.</p> <p>a. On the top right of the AI agent configuration dashboard, click on Save changes.</p> <p></p> <p>b. Next, click on the Publish button which then loads a prompt to enter a comment to track the saves/changes made to the AI Agent.</p> <p>Enter a comment as desired and click Publish.</p> <p></p> <p>Normally, we'd test the AI Agent at this point using Preview. However, as there is no API that can be called from the AI Agent Studio, you would only be able to chat until the data is attempted to be returned to CVP. You may still feel free to try out the agent in preview mode to see the initial responses, but it is not required.</p>"},{"location":"lab3_scripted_bot_basic/#task-2-integrate-to-call-flow","title":"Task 2. Integrate to Call Flow","text":"<p>We have now created an AI Agent. We are now ready to integrate into a call flow.  You will download a shell application that we have created for you. You will import this, then modify it to call the Agent that you created above.</p> <p>Step 1. Open mRemoteNG on WKST1 if you do not already have mRemote open, then login to CVP. Once you have logged in to CVP, locate the Call Studio icon on the desktop and double-click it to open Call Studio.</p> <p></p> <p>Step 2. Open a browser on the CVP server and download the application copying the link below and pasting it into the browser.</p> <pre><code>https://webexcc-sa.github.io/LAB-2356/downloads/NativeAI_Scripted.zip\n</code></pre> <p>Remember where you download this (it will default to the Downloads folder for the Administrator) to as you will need it in step 3. You do not need to extract the zip.</p> <p>Step 3. Import the application you have downloaded.</p> <ul> <li> <p>Select the File menu, then select Import.</p> <p></p> </li> <li> <p>In the box that pops up, select Projects from Folder or Archive, then select Next.</p> <p></p> </li> <li> <p>In the Import Projects from Folder or Archive dialog box, select the Archive button at the top of the box, then navigate to where you downloaded the example application and select it. Once you are back at the import dialog, ensure that you uncheck the folder \"NativeAI_Scripted.zip_expanded\" and leave the \"NativeAI_Scripted.zip_expanded\\NativeAI_Scripted\" selected. Refer to the image and once all options are set, select Finish.</p> <p></p> </li> </ul> <p>Step 4. In the Project Explorer, locate the NativeAI_Scripted project. Expand this and double-click on the app.callflow to open the example application.</p> <p></p> <p>Step 5. Review the application that you have imported. You will see that we have already added the required elements to the canvas.</p> <p></p> <p>Refer to the table for what each element is used for.</p> Element Name Element Type Element Function CVP Subdialog Start_01 CVP Subdialog Start Mandatory element for all Comprehensive Call Flows to receive data from CCE. CVP Subdialog End_01 CVP Subdialog End Mandatory element for all Comprehensive Call Flows to return data to CCE. TrackerBotStart VirtualAgentVoice VAV element which allows CCE to interact with the Native AI agent. TrackerBotOrderStatus VirtualAgentVoice VAV element which allows CCE to interact with the Native AI agent. TrackerBotStartDecision Decision Decision elements allow the user to take different outcomes based on the output of a previous element. This decision element handles the output from the TrackerBotStart VAV element. TrackerBotOrderStatusDecision Decision Decision elements allow the user to take different outcomes based on the output of a previous element. This decision element handles the output from the TrackerBotOrderStatus VAV element. ErrorMessage Audio Audio elements allow script to play either static audio files or play text to speech files through an ASR/TTS server. AgentFlag Flag Flag elements can be added to scripts to help with tracking calls through the logs and indicating what path a script has taken. This flag indicates that the customer requested to speak to an agent. ErrorFlag Flag Flag elements can be added to scripts to help with tracking calls through the logs and indicating what path a script has taken. This flag indicates that the AI Agent encountered an error. SetOrderNumber Set Value Set Value elements allow you to define and assign values to local variables. They also allow you to use Java and Javascript to set these variables based on other data in the script. The SetOrderNumber element is used to parse information returned from the agent and set values to be used in the GetOrderDetails element. SetMessageToReturn Set Value Set Value elements allow you to define and assign values to local variables. They also allow you to use Java and Javascript to set these variables based on other data in the script. The SetMessageToReturn element is used to parse the information returned by the RESTful API and set this to a variable to be sent back to the AI Agent. GetOrderDetails Rest_Client This element allows us to call the RESTful API with details from the agent to get information about the order. <p>Once you have imported the app, you are ready to start configuring the elements required to interact with the agent.</p> <p>Step 6.  Update the VAV Element with the Agent ID from AI Agent Studio.</p> <p>a. Select the TrackerBotStart VAV element, then select the Settings tab. The Webex AI Agent setting allows you to select which type of VAV agent you will be working with. Notice that we have selected the value, Scripted in the dropdown.</p> <p></p> <p>b. Immediately under the Webex AI Agent setting, you will see the Bot ID setting. The value you see is the ID of the agent that was used to create this lab and will not be in the tenant you are using.</p> <p></p> <p>To find the value you need to use, open your Webex AI Studio, select the agent you created above. Select the 3 dots at the top, right-hand side of the screen, and in the drop-down, select Copy agent ID.</p> <p></p> <p>Paste the agent ID you copied into the value for Bot ID. While you have this in your clipboard, locate the TrackerBotOrderStatus element and make the same update.</p> <p>Step 7. The Event_Data setting in the VAV element allows us to pass data to the agent. In the first VAV element, we will pass in two static values. In the TrackerBotStart Settings, locate the Event Data and click on the ellipsis (three dots) in the Value.  </p> <p></p> <p>You will see a settings box in the middle of your screen. This allows you to pass JSON formatted key/value pairs. You can pass individual values or even JSON into this. We will pass two values, name and place. For the name field, type in your first name. For the location field, type in the state or location where you are from. If your state or location has two names like North Carolina, pass this with single quotes around it. Refer to the example shown.  </p> <p></p> <p>Click OK after you have entered the values. You will see these reflected in the Settings tab.  </p> <p></p> <p>Step 8. Deploy the Application</p> <p>a. If you have not saved your application, do so now by selecting the save icon in the toolbar.</p> <p>b. Validate the application. Right-click the NativeAI_Scripted application and select Validate.</p> <p></p> <p>Check the errors grid at the bottom of the screen to ensure nothing is shown. If you do see any errors, review the error and resolve the issue by referring back to the portion of the lab where that item was configured.</p> <p>c. Deploy the application to the VXML Server (located on the CVP server you are logged into). Right-click on the NativeAI_Scripted application and select Deploy.</p> <p></p> <p>d. In the window that pops-up, leave the values at their defaults. The NativeAI_Scripted application checked and the folder left as \"C:\\Cisco\\CVP\\VXMLServer\" and click Finish.</p> <p>e. On the CVP server, deploy the application. Navigate to \"C:\\Cisco\\CVP\\VXMLServer\\applications\\NativeAI_Scripted\\admin\". Double-click deployApp.bat.</p> <p>f. In the command window that pops up, type \"yes\" to confirm that you want to deploy the application. Hit enter one more time after the application has been deployed to close the command prompt window.</p> <p>Step 9. Update CCE Script to use the new application</p> <p>Note: If you still have the Script Editor open from Lab 2, you may skip to step d.</p> <p>a. In your mRemote window, locate the AW-HDS-DDS server and login.</p> <p></p> <p>b. Open the Script Editor by opening the Unified CCE Administration Tools folder on the desktop, then opening the Script Editor link.</p> <p></p> <p></p> <p>c. Open the script named, CumulusInbound.</p> <p></p> <p>Select the Edit button in the toolbar.</p> <p></p> <p>d. Locate the Set Variable node which sets the VXML Application name (the fourth node from the top left).</p> <p></p> <p>Open it and update the name of the script (currently NativeAI_Auto) to \"NativeAI_Scripted\".</p> <p></p> <p>e. Select the Save button in the toolbar to make this change live, then select the Monitor Script button.</p> <p></p> <p>After a moment, you will see green boxes between each of the nodes. This will let you see the call's progress through the script visually. It is expected that all the green boxes show 0 as we have not placed any calls to this script yet.</p> <p></p>"},{"location":"lab3_scripted_bot_basic/#task-3-test-call-flow","title":"Task 3. Test Call Flow","text":"<p>In this task, we will test the Native AI agent that you created and see how the human agent sees the call.</p> <p>Step 1. If you are not already logged in to Finesse on WKST1, open the Chrome browser, open a new tab and enter the URL below: </p> <pre><code>https://finesse1.dcloud.cisco.com\n</code></pre> <p>Login with the following details:</p> <ul> <li>Username: sjeffers</li> <li>Password: C1sco12345</li> <li>Extension: 1080</li> </ul> <p>Note that this is an SSO agent so you should only need to enter the username in the Finesse login screen. The ADFS page should have the agent credentials saved.</p> <p>Once you have logged in to Finesse, select Ready from the drop-down -&gt; Next, click the VAV tab from the left side menu.</p> <p></p> <p>Step 2. Use your mobile phone to call into the number. </p> <p>a. Locate the Main phone number for your session. On WKST1 open a browser and open a new tab, then in the default page that appears, select Demo Links -&gt; Demo Website.</p> <p></p> <p>b. In the Cumulus Finance website that is shown, select the blue box on the right-hand side that reads Talk to an Expert.</p> <p></p> <p>c. In the box that pops out, select the Call Us link. In the box that pops up, note the Main number, this is what you will use to test your lab.</p> <p>IMPORTANT: THE NUMBER SHOWN IN THE IMAGE IS NOT THE NUMBER YOU WILL USE FOR YOUR LAB. ENSURE THAT YOU FIND THE NUMBER FOR YOUR SESSION!</p> <p></p> <p>Step 3. Use your mobile phone to call into the number. You should hear the agent greet you by name and your town, then ask how to help.</p> <p>Step 4. Recommended ways to test the agent.</p> <ol> <li>After the agent greets you by name, say \"Track an order\" or \"I'd like to track an order\".</li> <li>The agent will ask you for a 6-digit order number.</li> <li>After providing the order number, the agent will next ask you for 4-digit pin.</li> <li>You should now hear the agent provide you an update on the order followed by \"would you like to track another order?\".</li> <li>Say \"Yes\".</li> <li>Next, try a different utterance by saying \"Track order 123456 with pin 7890\".</li> <li>You should now hear the agent provide you an update on the order followed by \"would you like to track another order?\".</li> </ol> <p>Step 5.</p> <p>When you are done testing the AI Agent, ask to speak to a human agent. You should then see the call arrive at the Finesse desktop. Answer the call and notice that the transcript shows up. Notice in this version of the transcript, you can see the intents that the customer encountered in their conversation. Select the AI Assistant button (2) at the top to show the AI Assistant. Here (3), you will see a summary of the call. Finally, notice the call variable \"Call Reason\" (4) which gives a one sentence summary of what the customer called about.</p> <p></p> <p>This now completes lab 3</p>"},{"location":"lab4_chat_bot/","title":"Lab 4 - Digital Channels","text":""},{"location":"lab4_chat_bot/#lab-4-digital-deflection","title":"Lab 4 - Digital Deflection","text":""},{"location":"lab4_chat_bot/#objectives","title":"Objectives","text":"<p>In this lab, you will learn how to integrate an Autonomous AI agent into a chat flow.</p> <ul> <li>Know how to create an Autonomous AI Agent from scratch and map it to a knowledge base.</li> <li>Create an agent goal, instructions, and welcome message.</li> <li>Understand how to configure and use fulfillment.</li> <li>See how to integrate the AI Agent into a call studio script.</li> </ul> <p>Explanation of formatting:</p> <ul> <li>Italics - This indicates a button, menu option, or object that should be selected.</li> <li>\"Quoted Text\" - This indicates that the text should be typed exactly as indicated.</li> </ul> <p>Instructor Demonstrated</p> <p>Note, this lab is going to be instructor demonstrated. There are no tasks that you will do in this lab. The lab guide is provided for you to refer to later.</p>"},{"location":"lab4_chat_bot/#section-1-add-autonomous-ai-agent-to-inbound-chat-flow","title":"Section 1 - Add Autonomous AI Agent to Inbound chat flow","text":"<p>In this section we will integrate the Autonomous AI agent to a inbound chat flow. You will not perform any of the steps in this section, they are simply for your reference.</p>"},{"location":"lab4_chat_bot/#task-1-import-inbound-flow","title":"Task 1. Import Inbound Flow","text":"<p>Step 1. Download a customized Inbound flow by selecting the link. Unzip this to a location on your computer.</p> <p>Step 2. Login to Webex Connect by navigating to the Contact Center -&gt; Digital menu options in Webex Control Hub.</p> <p>Step 3. Ensure that you have created a Live Chat Asset and Service to use. You can find instructions here.</p> <p>Step 4. In the service you created, select Flows, then select the Create Flow button. </p> <p></p> <p></p> <ul> <li>Provide a descriptive name for the Flow Name.</li> <li>From the Method drop-down, select \"Upload a flow\"</li> <li>Either drag and drop the extracted flow into the Attachment box or, select Choose File and navigate to where you extracted the zip file and choose the .workflow file.</li> <li>Select Create to upload this flow and open it.</li> </ul> <p>Step 5. Modify the flow.</p> <p>a. Accept the defaults in the initial Configure APP Event.</p> <p>b. Locate the AI Agent Node and open it.</p> <p></p> <p>c. In the AI Agent Node, select Autonomous from the Agent Type drop-down box. Next, select the AI Agent you created in the Agent drop-down.</p> <p></p> <p>Note the Message is a variable. Each time that the loop occurs, this message will be updated with the customer's response back to the agent. This variable should be set to a message which will start the agent such as \"Hello\".</p> <p>d. Review the remaining nodes in the workflow. These are as follows:</p> <p></p> <ul> <li>Evaluate - This simply sets the timestamp to the current time.</li> <li>Sent agent response text - This will display the response from the agent to the customer.</li> <li>Append Conversation - This will write the agent response to history.</li> <li>Receive - This receives the response from the customer back to the agent.</li> <li>Evaluate - This normalizes the response from the customer and ensures there are no content issues. This will then set the input message variable to the sanitized response.</li> <li>Append Conversation - This writes the customer's response to history.</li> </ul> <p>e. At any point if the customer asks to speak to an agent, the AI Agent Node will take the onAgentHandover exit path and will be sent to CCE for agent handling.</p>"},{"location":"lab4_chat_bot/#task-2-save-and-make-live","title":"Task 2. Save and make Live","text":"<p>Step 1. Save the Flow.</p> <p>Save your changes by selecting Save at the top of the screen. If any messages come up that nodes are not configured, select each message, then check to ensure that the node is correctly configured and saved. Some nodes simply need to be opened and saved after a workflow has been imported.</p> <p>Step 2. Make Flow live and map to an application.</p> <p></p> <p>Select the Make Live button at the top of the work flow. In the Make Live Configuration dialog box, select the application you wish to map this flow to. It will take several seconds to a minute for the flow to go live.</p> <p>Task 3. Install to Chat</p> <p>The steps to customize the chat interface and install in a web site will not be covered in detail in this section.</p> <p>You can find details at this link</p>"},{"location":"lab4_chat_bot/#section-2-scripted-ai-agent-steps","title":"Section 2 - Scripted AI Agent Steps","text":"<p>Note: This is not going to be shown in the class but is here so you can see what changes need to be made to the AI agent to add in chat support.</p>"},{"location":"lab4_chat_bot/#task-1-create-intents","title":"Task 1. Create Intents","text":"<p>In this task, we will create the following 2 Intents</p> <ul> <li>Chat Start Order Tracking</li> <li>Chat Order Results</li> </ul> <p>Step 1. Create Intent - \"Chat Start Order Tracking\"</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Intents -&gt; click on the Create intent button.</p> <p></p> <p>b. Enter the Intent name as \"Chat Start Order Tracking\".</p> <p>c. Under Intent and Utterances section, type the phrase \"Start_Chat\" and click the Add button.</p> <p>Note:</p> <ul> <li>For the Voice channel, the welcome_event was sent from the Call Studio script as the trigger for the AI Agents' welcome message.</li> <li>Similarly, for the Web (Chat) channel, the phrase \"Start_Chat\" will be used as the trigger for the AI Agents' welcome message. This will be configured in the Inbound Flow in a later step.</li> </ul> <p>d. In the Response section, from the drop down, select Welcome message.</p> <p>e. Lastly, click Create to complete the \"Chat Start Order Tracking\" intent configuration.</p> <p></p> <p>Step 2. Create Intent - \"Chat Order Results\"</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Intents -&gt; click on the Create intent button.</p> <p></p> <p>b. Enter the Intent name as \"Chat Order Results\".</p> <p>c. Under Intent and Utterances section, type the phrase \"order_results\" and click the Add button.</p> <p>Note:</p> <ul> <li>In the Inbound Flow, once the order_number and user_pin slots are collected as part of the \"Start Order Tracking\" Intent, the Inbound Flow sends the order_results message to trigger the track_order_results response.</li> </ul> <p>d. In the Response section, from the drop down, select track_order_results.</p> <p>e. Lastly, click Create to complete the \"Chat Order Results\" intent configuration.</p> <p></p>"},{"location":"lab4_chat_bot/#task-2-update-responses-for-the-default-channel-web","title":"Task 2. Update Responses for the Default channel (web)","text":"<p>In this task, we will be updating the following responses - Default channel (web) - Chat</p> <ul> <li>Welcome message</li> <li>order_number</li> <li>pin_missing</li> <li>track_order_wait</li> <li>track_order_results</li> <li>track_another_order</li> <li>Goodbye</li> </ul> <p>Step 1. Update the Welcome message response</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; click on the Welcome message response.</p> <p></p> <p>b. On the left side of the response window, click on the previously created conditional response \"check_if_name_is_passed\" -&gt; Select the Rules tab.</p> <p>c. Click the +OR Condition button and enter as below:</p> <ul> <li>Left variable: consumerData.extra_params.name</li> <li>Operator: Exists</li> </ul> <p></p> <p>c. Next, select the Actions tab on the left and click the Default (web) tab (Note: since this is for the chat channel, ensure you are NOT selecting Voice option)</p> <p></p> <p>d. Add the text below as Variant 1 in the Text section. Feel free to add more of these variants if you like.</p> <p>Note: consumerData. is how we can reference data that is passed from Chat Flow to the bot.</p> <pre><code>Hello  ${consumerData.extra_params.name} , I am a Tracker bot. I can help you track your packages. How can I help you today? To get started, please ask me to track an order number.\n</code></pre> <p></p> <p>Step 2. Update the order_number response</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; click on the order_number response.</p> <p>b. Next, click on the Default (web) button and enter the below text as Variant 1.</p> <pre><code>Please provide your six digit order number.\n</code></pre> <p></p> <p>Step 3. Update the pin_missing response</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; click on the pin_missing response.</p> <p>b. Next, click on the Default (web) button and enter the below text as Variant 1.</p> <pre><code>Please provide your four digit PIN.\n</code></pre> <p></p> <p>Step 4. Update the track_order_wait response</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; click on the track_order_wait response.</p> <p>b. Next, click on the Default (web) button and enter the below text as Variant 1.</p> <pre><code>Getting your package details now...\n</code></pre> <p></p> <p>Step 5. Update the track_order_results response</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; click on the track_order_results response.</p> <p>b. On the left side of the response window, click on the previously created conditional response \"order_status_check\" -&gt; Select the Rules tab</p> <p>c. Click the +OR Condition button and enter as below:</p> <ul> <li>Left variable: consumerData.extra_params.order_status</li> <li>Operator: Exists</li> </ul> <p></p> <p>c. Next, select the Actions tab on the left and click the Default (web) tab (Note: since this is for the chat channel, ensure you are NOT selecting Voice option)</p> <p></p> <p>d. Add the text below as Variant 1 in the Text section. Feel free to add more of these variants if you like.</p> <p>Note: consumerData. is how we can reference data that is passed from Chat Flow to the bot.</p> <pre><code>We have found your order. ${consumerData.extra_params.order_status}  Do you need anything else?\n</code></pre> <p></p> <p>Step 6. Update the track_another_order response</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; click on the track_another_order response.</p> <p>b. Next, click on the Default (web) button and enter the below text as Variant 1.</p> <pre><code>Great! To get started, please ask me to track an order number.\n</code></pre> <p></p> <p>Step 7. Update the Goodbye response</p> <p>a. In the AI Agent configuration, navigate to Script -&gt; Responses -&gt; click on the Goodbye response.</p> <p>b. Next, click on the Default (web) button and enter the below text as Variant 1.</p> <pre><code>Thank you for your response! I will now connect you to a live agent for further assistance! Have a wonderful day!\n</code></pre> <p></p>"},{"location":"lab4_chat_bot/#task-3-import-and-configure-the-native-ai-inbound-chat-flow","title":"Task 3. Import and Configure the Native AI Inbound Chat Flow","text":"<p>Step 1. Navigate to this link. Unzip this to a location on your computer.</p> <p>Step 2. Log into Webex Control Hub admin.webex.com and navigate to Contact Center -&gt; Digital -&gt; Webex Connect. This opens up the Webex Connect portal.</p> <p></p> <p>Step 3. Navigate to Services tab and select the Service created for you seat number.</p> <p>Step 4. Click the Create Flow button -&gt; enter a Flow Name -&gt; select Upload a Flow -&gt; Choose the downloaded file -&gt; Click Create</p> <p>Step 5. Update the Bot Start and the Bot OrderResults nodes</p> <ul> <li>Under the Agent field, select the AI Agent Bot you created</li> </ul> <p></p> <p></p> <p></p> <p>Step 6. Review the nodes to see where the messages are sent to the AI Agent.</p> <p>Step 7. Click on the Settings tab and update the following variables:</p> <ul> <li>CloudConnectFQDN</li> <li>botInputMessage</li> </ul> <p></p> <p>Step 8. Save and Make Live</p> <p></p>"},{"location":"lab4_chat_bot/#task-4-install-to-chat","title":"Task 4. Install to Chat","text":"<p>The steps to customize the chat interface and install in a web site will not be covered in detail in this section.</p> <p>You can find details at this link</p> <p>This now completes lab 4</p>"},{"location":"labaccess/","title":"Credentials","text":""},{"location":"labaccess/#webex-tenant-access","title":"Webex Tenant Access","text":"<p>We will be using a Tenant which has already been configured for this class. Please refer to the table below for the login details.</p> Tenant Number Username Password 1 CiscoWxConnect2+tenant01@gmail.com NativeAIWx1! <p>Note: The Webex Control Hub URL is always: https://admin.webex.com</p>"},{"location":"labaccess/#dcloud-access","title":"dCloud Access","text":"<p>We are using Cisco eXpo for this lab. Please open the Expo URL to start the lab.</p> <p></p> <ol> <li> <p>Select the Explore button to get started.</p> </li> <li> <p>In the Terms and Conditions bot, enter your email, then check the box to accept the dCloud Terms &amp; Conditions. When you have done this, select Continue.</p> <p></p> </li> <li> <p>If you click Continue and see this error, click OK and notify your Lab Proctor right away so we can assist you.</p> <p></p> </li> <li> <p>You are assigned a session. Select the Remote Desktop link next to WKST1 to open the jump box we will use for the entire lab.</p> <p></p> </li> </ol>"},{"location":"labaccess/#lab-topology","title":"Lab Topology","text":"<p>This demonstration includes several VMs. Most of the servers are fully configurable using the administrative level account. Administrative account details are included in the steps where relevant and in the server details table. You should not need to type in the password for server logins at any point, but are listed if you do find a situation where they are required.</p>"},{"location":"labaccess/#address-and-credentials","title":"Address and Credentials","text":"Demo VMs Hostname IP Address Username Password AD / Exchange ad1 198.18.133.1 DCLOUD\\Administrator C1sco12345 CUCM cucm1 198.18.133.3 administrator C1sco12345 Rogger Ccerogger 198.18.135.37 DCLOUD\\Administrator C1sco12345 PG Ccecall 198.18.133.12 DCLOUD\\Administrator C1sco12345 AW-HDS ccedata 198.18.133.11 DCLOUD\\Administrator C1sco12345 CVP Call Server CVP VXML Server cvp1 198.18.133.13 DCLOUD\\Administrator C1sco12345 CVP Reporting Server cvprep1 198.18.133.70 DCLOUD\\Administrator C1sco12345 Finesse finesse1 198.18.133.16 administrator dCloud!23 CUIC Live Data IdS cuic1 198.18.133.15 administrator dCloud!23 VVB vvb1 198.18.133.143 administrator dCloud!23 Cloud Connect cloudconnect1 198.18.133.103 administrator C1sco12345 Nuance Speech Suite nuance1 198.18.135.126 DCLOUD\\Administrator C1sco12345 Workstation 1 wkst1 198.18.133.75 DCLOUD\\sjeffers C1sco12345 Workstation 2 wkst2 198.18.133.76 DCLOUD\\rbarrows C1sco12345 vCube cc-vcube 198.18.133.226 admin C1sco12345"},{"location":"labaccess/#agent-and-user-information","title":"Agent and User Information","text":"User Name Role User ID Password Endpoint Devices Extension Sandra Jefferson Main Agent sjeffers C1sco12345 Workstation 1 Jabber 1080 Josh Peterson CRM Agent jopeters C1sco12345 Workstation 1 Jabber 1080 Trudy Vere-Jones CRM Agent trujones C1sco12345 Workstation 2 Jabber 1082 Owen Harvey Outbound Agent oharvey C1sco12345 Workstation 1 Jabber 1080 Annika Hamilton Outbound Agent annika C1sco12345 Workstation 2 Jabber 1082 Helen Laing UWF Agent hliang C1sco12345 Workstation 1 Jabber 1080 Rick Barrows Main Supervisor rbarrows@dcloud.cisco.com C1sco12345 Workstation 2 Jabber 1082 James Braksted UWF Supervisor jabrakcs@dcloud.cisco.com C1sco12345 Workstation 2 Jabber 1082"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":""},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>This lab will give you an introduction to Cisco's new Native AI for Contact Center Enterprise. This session focuses on the benefits of the new contact center AI and cloud services within Cisco Contact Center Enterprise (UCCE/PCCE/WxCCE) for large enterprises looking to take advantage of cloud contact center services either in part or in full. We intend to show you how to implement several of these cloud-based services either hands-on or step-through to include setup, base functionality, and basic troubleshooting. This session is ideal for IT professionals or decision-makers involved in managing and planning to accelerate their business value with new contact center enterprise AI and cloud service offerings.</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"overview/#lab-access","title":"Lab Access","text":"<p>You will use a dCloud Expo Session to access this lab.</p>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>Select the Lab menu at the top of the screen.</p>"},{"location":"topologies/","title":"Lab topologies","text":""},{"location":"topologies/#lab-topologies","title":"Lab topologies","text":""},{"location":"howToUse/admonition/","title":"Admonition","text":"<p>In addition to the  stock admonitions which are available out of the box we have added some additional branded admonitions which were created by Bobby McGonigle. </p> <p>Blank</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Blank!')\n</code></pre> <p>Vidcast</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Vidcast!')\n</code></pre> <p>Download</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Download!')\n</code></pre> <p>Cedeploy</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Ce-Deploy!')\n</code></pre> <p>Webex</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Webex!')\n</code></pre> <p>Gif</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('How should I pronounce Gif?')\n</code></pre> <p>Important</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Important!')\n</code></pre> <p>Challenge</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Challenge!')\n</code></pre> <p>Tool</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Tool!')\n</code></pre> <p>Curious</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Curious!')\n</code></pre>"},{"location":"howToUse/customFeatures/","title":"customFeatures","text":""},{"location":"howToUse/customFeatures/#adding-a-copy-button-without-a-code-block","title":"Adding a Copy Button Without a Code Block","text":"<p><code>This will copy the following text: &lt;copy&gt;Text to copy&lt;/copy&gt;</code> </p> <p>This will copy the following text: Text to copy</p>"},{"location":"howToUse/customFeatures/#adding-user-specific-variables-into-your-lab-guide","title":"Adding user specific variables into your lab guide","text":"<p>There may be times in which you want to embed some attendee specific information into the instructions of your lab guide, like credentials or phone numbers, which will be used on multiple pages of your lab guide.  You can gather the information via a form or you can pass a pre-encoded JSON string as a URL parameter to populate the variable values into the browser's session storage.  Then you can use a simple HTML tag with a special class name to update the values in the lab guide.  This feature can be combined with the copy button method above.</p>"},{"location":"howToUse/customFeatures/#form-method","title":"Form Method","text":"Show me the code <pre><code>&lt;form id=\"info\"&gt;\n\n\n&lt;label for=\"Admin\"&gt;Admin Login:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Admin\" name=\"Admin\"&gt;&lt;br&gt;\n\n&lt;label for=\"PW\"&gt;Admin Password:&lt;/label&gt;\n&lt;input type=\"text\" id=\"PW\" name=\"PW\"&gt;&lt;br&gt;\n\n&lt;label for=\"EP\"&gt;Inbound Channel Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"EP\" name=\"EP\"&gt;&lt;br&gt;\n\n&lt;label for=\"DN\"&gt;Inbound Channel Phone Number:&lt;/label&gt;\n&lt;input type=\"text\" id=\"DN\" name=\"DN\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue\"&gt;Queue 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue\" name=\"Queue\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue2\"&gt;Queue 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue2\" name=\"Queue2\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team\"&gt;Team 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team\" name=\"Team\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team2\"&gt;Team 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team2\" name=\"Team2\"&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;button onclick=\"setValues()\"&gt;Update Lab Guide&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Example Input Form Admin Login: Admin Password: Inbound Channel Name: Inbound Channel Phone Number: Queue 1 Name: Queue 2 Name: Team 1 Name: Team 2 Name: Update Lab Guide <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned Team name 2: Provided by proctor</p>"},{"location":"howToUse/customFeatures/#url-method","title":"URL Method","text":"<p>If you have a lot of attendee variables in your lab, you may choose to precompile and encode them so that you can simply provide a URL link which will load all of their required information.</p> <p>To see this in action, add this string at the end of the URL for any page on this site: ?eyJBZG1pbiI6ImFkbWluQHh5ei5iaXoiLCJQVyI6InNVcGVyU2VjcmV0MTIzISIsIkVQIjoiRVAxIiwiRE4iOiIrMTkxMDU1NTEyMTUyIiwiUXVldWUiOiJRdWV1ZTEiLCJRdWV1ZTIiOiJRdWV1ZTIiLCJUZWFtIjoiVGVhbTEiLCJUZWFtMiI6IlRlYW0yIn0=</p>"},{"location":"howToUse/initialSetup/","title":"Initial Setup","text":""},{"location":"howToUse/initialSetup/#initial-setup","title":"Initial Setup","text":"<p>This lab guide template uses MKDocs to take your markdown documentation and transform it into an interactive web based lab guide.  You will need to install some software on your PC or Mac in order to take full advantage of the tool which will allow you to view your changes as you save them and ensure that your formatting is exactly how you want it.</p>"},{"location":"howToUse/initialSetup/#prerequisite-software-to-install","title":"Prerequisite Software to Install","text":"<ol> <li>Python</li> <li>Visual Studio Code</li> <li>Git</li> </ol>"},{"location":"howToUse/initialSetup/#setting-up-your-lab-guide-on-your-computer","title":"Setting up your lab guide on your computer","text":""},{"location":"howToUse/initialSetup/#clone-your-repository-with-git","title":"Clone your repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source:  https://github.com/WebexCC-SA/LAB-2356.git</p> <p>Select or create a new folder to clone the repository into.</p>"},{"location":"howToUse/initialSetup/#build-the-environment","title":"Build the environment","text":"<p>When prompted to open the cloned repository, select open.</p> <p>Drag open the terminal at the bottom of the Visual Studio Code window</p> Show Me <p></p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p> <p>venv\\Scripts\\activate.ps1</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000 </p> <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>source venv/bin/activate</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/postInitial/","title":"Using the tool after the initial setup","text":""},{"location":"howToUse/postInitial/#using-the-tool-after-the-initial-setup","title":"Using the tool after the initial setup","text":"<p>After the initial setup you will only need to take the following steps:</p> <p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Open Folder and navigate to the folder where you cloned the repository</p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>venv\\Scripts\\activate.ps1</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p> <p>In your terminal enter the following commands:</p> <p>source venv/bin/activate</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/references/","title":"References","text":""},{"location":"howToUse/references/#mk-docs-feature-reference","title":"MK Docs Feature Reference:","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/ </p>"},{"location":"howToUse/references/#markdown-cheat-sheets","title":"Markdown Cheat Sheets:","text":"<p>https://www.markdownguide.org/cheat-sheet/ </p> <p>https://github.com/lifeparticle/Markdown-Cheatsheet </p>"},{"location":"howToUse/syncChanges/","title":"Publishing Your Changes","text":""},{"location":"howToUse/syncChanges/#publishing-your-changes","title":"Publishing Your Changes","text":"<p>As you progress with the creation of your lab guide, you should sync your changes periodically to GitHub.  </p>"},{"location":"howToUse/syncChanges/#syncing-your-changes-to-github","title":"Syncing your changes to GitHub","text":"<p>Make sure that you have saved all of the files you want to sync up to the repository</p> <p>Click the Source Control button in the left menu </p> <p>Click the plus sign next to each file you want to sync as you hover over the file names or alternatively, click the plus sign next to changes</p> <p>Enter a note about the changes you are making in the message text box</p> <p>Click the down chevron  on the commit button to reveal more options</p> <p>Select Commit &amp; Sync </p>"},{"location":"howToUse/syncChanges/#after-you-sync-your-changes-it-will-take-a-few-minutes-for-github-actions-to-build-the-website-so-that-you-can-view-all-of-the-changes-you-made","title":"After you Sync your changes, it will take a few minutes for GitHub Actions to build the website so that you can view all of the changes you made.","text":""}]}